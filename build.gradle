buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
		classpath 'org.ajoberstar:gradle-git:0.10.1'
    }
}

apply plugin: 'forge'

ext.configFile = file "build.properties"
configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

version = config.mc_version + "-" + config.mod_version + "-" + config.build_number
group= config.package_group
archivesBaseName = config.mod_name

import org.ajoberstar.grgit.Grgit

def gitHash = 'unknown'
if (new File(projectDir, '.git').exists()) {
    def repo = Grgit.open(project.file('.'))
    gitHash = repo.log().find().abbreviatedId
}

repositories {
	maven { //Tinker's and Mantle
        name 'DVS1 Maven FS'
        url 'http://dvs1.progwml6.com/files/maven'
	}
	maven { // the repo from which to get NEI and stuff
		name 'CB Repo'
		url "http://chickenbones.net/maven/"
	}
	maven { //WAILA
        name "ProfMobius Maven FS"
        url "http://mobiusstrip.eu/maven"
    }
	maven {
        name "ForgeFS"
        url 'http://files.minecraftforge.net/maven'
    }
}

minecraft {
    version = config.forge_version + "-" + config.mc_version
    runDir = "eclipse"
}

dependencies {
	compile "codechicken:CodeChickenLib:" + config.mc_version + "-" + config.ccLib_version + ":dev"
    compile "codechicken:CodeChickenCore:" + config.mc_version + "-" + config.ccc_version + ":dev"
    compile "codechicken:NotEnoughItems:" + config.mc_version + "-" + config.nei_version + ":dev"
	compile "codechicken:ForgeMultipart:" + config.mc_version + "-" + config.forgeMultipart_version + ":dev"
    compile "mantle:Mantle:1.7.10-0.3.2.jenkins187:deobf"
    compile "tconstruct:TConstruct:" + config.mc_version + "-" + config.tconstruct_version + ":deobf"
}

processResources
{
	inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version
	
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        include '**/*.properties'

        expand 'version': project.version, 'mcversion': project.minecraft.version
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
        exclude '**/*.properties'
		exclude '**/*.db'
    } 
}

task deobfJar(type: Jar) {
    from(sourceSets.main.output)
    classifier = 'deobf'     

tasks.build.dependsOn deobfJar

tasks.withType(JavaCompile) { task ->
    task.options.encoding = 'UTF-8'
}    
}
